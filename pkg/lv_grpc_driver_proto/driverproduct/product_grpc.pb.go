// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: driverproduct/product.proto

package driverproduct

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RpcProduct_QueryProductList_FullMethodName = "/driverproduct.RpcProduct/QueryProductList"
	RpcProduct_QueryProductById_FullMethodName = "/driverproduct.RpcProduct/QueryProductById"
)

// RpcProductClient is the client API for RpcProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcProductClient interface {
	// 获取所有设备 edge s driver c
	QueryProductList(ctx context.Context, in *QueryProductListRequest, opts ...grpc.CallOption) (*QueryProductListResponse, error)
	// 获取设备 edge s driver c
	QueryProductById(ctx context.Context, in *QueryProductByIdRequest, opts ...grpc.CallOption) (*QueryProductByIdResponse, error)
}

type rpcProductClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcProductClient(cc grpc.ClientConnInterface) RpcProductClient {
	return &rpcProductClient{cc}
}

func (c *rpcProductClient) QueryProductList(ctx context.Context, in *QueryProductListRequest, opts ...grpc.CallOption) (*QueryProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductListResponse)
	err := c.cc.Invoke(ctx, RpcProduct_QueryProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcProductClient) QueryProductById(ctx context.Context, in *QueryProductByIdRequest, opts ...grpc.CallOption) (*QueryProductByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductByIdResponse)
	err := c.cc.Invoke(ctx, RpcProduct_QueryProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcProductServer is the server API for RpcProduct service.
// All implementations must embed UnimplementedRpcProductServer
// for forward compatibility.
type RpcProductServer interface {
	// 获取所有设备 edge s driver c
	QueryProductList(context.Context, *QueryProductListRequest) (*QueryProductListResponse, error)
	// 获取设备 edge s driver c
	QueryProductById(context.Context, *QueryProductByIdRequest) (*QueryProductByIdResponse, error)
	mustEmbedUnimplementedRpcProductServer()
}

// UnimplementedRpcProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcProductServer struct{}

func (UnimplementedRpcProductServer) QueryProductList(context.Context, *QueryProductListRequest) (*QueryProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductList not implemented")
}
func (UnimplementedRpcProductServer) QueryProductById(context.Context, *QueryProductByIdRequest) (*QueryProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductById not implemented")
}
func (UnimplementedRpcProductServer) mustEmbedUnimplementedRpcProductServer() {}
func (UnimplementedRpcProductServer) testEmbeddedByValue()                    {}

// UnsafeRpcProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcProductServer will
// result in compilation errors.
type UnsafeRpcProductServer interface {
	mustEmbedUnimplementedRpcProductServer()
}

func RegisterRpcProductServer(s grpc.ServiceRegistrar, srv RpcProductServer) {
	// If the following call pancis, it indicates UnimplementedRpcProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RpcProduct_ServiceDesc, srv)
}

func _RpcProduct_QueryProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcProductServer).QueryProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcProduct_QueryProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcProductServer).QueryProductList(ctx, req.(*QueryProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcProduct_QueryProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcProductServer).QueryProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcProduct_QueryProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcProductServer).QueryProductById(ctx, req.(*QueryProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcProduct_ServiceDesc is the grpc.ServiceDesc for RpcProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driverproduct.RpcProduct",
	HandlerType: (*RpcProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryProductList",
			Handler:    _RpcProduct_QueryProductList_Handler,
		},
		{
			MethodName: "QueryProductById",
			Handler:    _RpcProduct_QueryProductById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driverproduct/product.proto",
}
