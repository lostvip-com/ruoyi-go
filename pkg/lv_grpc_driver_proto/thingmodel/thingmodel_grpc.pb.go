// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: thingmodel/thingmodel.proto

package thingmodel

import (
	context "context"
	drivercommon "github.com/lostvip-com/lv_grpc_driver_proto/drivercommon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThingModelDownService_ThingModelMsgIssue_FullMethodName = "/thingmodel.ThingModelDownService/ThingModelMsgIssue"
)

// ThingModelDownServiceClient is the client API for ThingModelDownService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// edge 物模型消息下发 sdk
type ThingModelDownServiceClient interface {
	ThingModelMsgIssue(ctx context.Context, in *ThingModelIssueMsg, opts ...grpc.CallOption) (*ThingModelResp, error)
}

type thingModelDownServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThingModelDownServiceClient(cc grpc.ClientConnInterface) ThingModelDownServiceClient {
	return &thingModelDownServiceClient{cc}
}

func (c *thingModelDownServiceClient) ThingModelMsgIssue(ctx context.Context, in *ThingModelIssueMsg, opts ...grpc.CallOption) (*ThingModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThingModelResp)
	err := c.cc.Invoke(ctx, ThingModelDownService_ThingModelMsgIssue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingModelDownServiceServer is the server API for ThingModelDownService service.
// All implementations must embed UnimplementedThingModelDownServiceServer
// for forward compatibility.
//
// edge 物模型消息下发 sdk
type ThingModelDownServiceServer interface {
	ThingModelMsgIssue(context.Context, *ThingModelIssueMsg) (*ThingModelResp, error)
	mustEmbedUnimplementedThingModelDownServiceServer()
}

// UnimplementedThingModelDownServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThingModelDownServiceServer struct{}

func (UnimplementedThingModelDownServiceServer) ThingModelMsgIssue(context.Context, *ThingModelIssueMsg) (*ThingModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThingModelMsgIssue not implemented")
}
func (UnimplementedThingModelDownServiceServer) mustEmbedUnimplementedThingModelDownServiceServer() {}
func (UnimplementedThingModelDownServiceServer) testEmbeddedByValue()                               {}

// UnsafeThingModelDownServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingModelDownServiceServer will
// result in compilation errors.
type UnsafeThingModelDownServiceServer interface {
	mustEmbedUnimplementedThingModelDownServiceServer()
}

func RegisterThingModelDownServiceServer(s grpc.ServiceRegistrar, srv ThingModelDownServiceServer) {
	// If the following call pancis, it indicates UnimplementedThingModelDownServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThingModelDownService_ServiceDesc, srv)
}

func _ThingModelDownService_ThingModelMsgIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingModelIssueMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingModelDownServiceServer).ThingModelMsgIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingModelDownService_ThingModelMsgIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingModelDownServiceServer).ThingModelMsgIssue(ctx, req.(*ThingModelIssueMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ThingModelDownService_ServiceDesc is the grpc.ServiceDesc for ThingModelDownService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThingModelDownService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thingmodel.ThingModelDownService",
	HandlerType: (*ThingModelDownServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThingModelMsgIssue",
			Handler:    _ThingModelDownService_ThingModelMsgIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thingmodel/thingmodel.proto",
}

const (
	ThingModelUpService_ThingModelMsgReport_FullMethodName = "/thingmodel.ThingModelUpService/ThingModelMsgReport"
)

// ThingModelUpServiceClient is the client API for ThingModelUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// sdk 物模型消息上报 edge
type ThingModelUpServiceClient interface {
	ThingModelMsgReport(ctx context.Context, in *ThingModelIssueMsg, opts ...grpc.CallOption) (*drivercommon.CommonResponse, error)
}

type thingModelUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThingModelUpServiceClient(cc grpc.ClientConnInterface) ThingModelUpServiceClient {
	return &thingModelUpServiceClient{cc}
}

func (c *thingModelUpServiceClient) ThingModelMsgReport(ctx context.Context, in *ThingModelIssueMsg, opts ...grpc.CallOption) (*drivercommon.CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(drivercommon.CommonResponse)
	err := c.cc.Invoke(ctx, ThingModelUpService_ThingModelMsgReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingModelUpServiceServer is the server API for ThingModelUpService service.
// All implementations must embed UnimplementedThingModelUpServiceServer
// for forward compatibility.
//
// sdk 物模型消息上报 edge
type ThingModelUpServiceServer interface {
	ThingModelMsgReport(context.Context, *ThingModelIssueMsg) (*drivercommon.CommonResponse, error)
	mustEmbedUnimplementedThingModelUpServiceServer()
}

// UnimplementedThingModelUpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThingModelUpServiceServer struct{}

func (UnimplementedThingModelUpServiceServer) ThingModelMsgReport(context.Context, *ThingModelIssueMsg) (*drivercommon.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThingModelMsgReport not implemented")
}
func (UnimplementedThingModelUpServiceServer) mustEmbedUnimplementedThingModelUpServiceServer() {}
func (UnimplementedThingModelUpServiceServer) testEmbeddedByValue()                             {}

// UnsafeThingModelUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingModelUpServiceServer will
// result in compilation errors.
type UnsafeThingModelUpServiceServer interface {
	mustEmbedUnimplementedThingModelUpServiceServer()
}

func RegisterThingModelUpServiceServer(s grpc.ServiceRegistrar, srv ThingModelUpServiceServer) {
	// If the following call pancis, it indicates UnimplementedThingModelUpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThingModelUpService_ServiceDesc, srv)
}

func _ThingModelUpService_ThingModelMsgReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingModelIssueMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingModelUpServiceServer).ThingModelMsgReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingModelUpService_ThingModelMsgReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingModelUpServiceServer).ThingModelMsgReport(ctx, req.(*ThingModelIssueMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ThingModelUpService_ServiceDesc is the grpc.ServiceDesc for ThingModelUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThingModelUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thingmodel.ThingModelUpService",
	HandlerType: (*ThingModelUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThingModelMsgReport",
			Handler:    _ThingModelUpService_ThingModelMsgReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thingmodel/thingmodel.proto",
}
