// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: driverdevice/device.proto

package driverdevice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceStatus int32

const (
	DeviceStatus_UnKnowStatus DeviceStatus = 0
	DeviceStatus_OnLine       DeviceStatus = 1
	DeviceStatus_OffLine      DeviceStatus = 2
	DeviceStatus_UnActive     DeviceStatus = 3
	DeviceStatus_Disable      DeviceStatus = 4
)

// Enum value maps for DeviceStatus.
var (
	DeviceStatus_name = map[int32]string{
		0: "UnKnowStatus",
		1: "OnLine",
		2: "OffLine",
		3: "UnActive",
		4: "Disable",
	}
	DeviceStatus_value = map[string]int32{
		"UnKnowStatus": 0,
		"OnLine":       1,
		"OffLine":      2,
		"UnActive":     3,
		"Disable":      4,
	}
)

func (x DeviceStatus) Enum() *DeviceStatus {
	p := new(DeviceStatus)
	*p = x
	return p
}

func (x DeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_driverdevice_device_proto_enumTypes[0].Descriptor()
}

func (DeviceStatus) Type() protoreflect.EnumType {
	return &file_driverdevice_device_proto_enumTypes[0]
}

func (x DeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatus.Descriptor instead.
func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{0}
}

type ConnectStatus int32

const (
	ConnectStatus_ONLINE   ConnectStatus = 0 //在线
	ConnectStatus_OFFLINE  ConnectStatus = 1 //离线
	ConnectStatus_UnACTIVE ConnectStatus = 2 //未激活
	ConnectStatus_DISABLE  ConnectStatus = 3 //禁用
	ConnectStatus_UnKnow   ConnectStatus = 4 //未知
)

// Enum value maps for ConnectStatus.
var (
	ConnectStatus_name = map[int32]string{
		0: "ONLINE",
		1: "OFFLINE",
		2: "UnACTIVE",
		3: "DISABLE",
		4: "UnKnow",
	}
	ConnectStatus_value = map[string]int32{
		"ONLINE":   0,
		"OFFLINE":  1,
		"UnACTIVE": 2,
		"DISABLE":  3,
		"UnKnow":   4,
	}
)

func (x ConnectStatus) Enum() *ConnectStatus {
	p := new(ConnectStatus)
	*p = x
	return p
}

func (x ConnectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_driverdevice_device_proto_enumTypes[1].Descriptor()
}

func (ConnectStatus) Type() protoreflect.EnumType {
	return &file_driverdevice_device_proto_enumTypes[1]
}

func (x ConnectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectStatus.Descriptor instead.
func (ConnectStatus) EnumDescriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{1}
}

type ConnectIotPlatformRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	DeviceId          int64                  `protobuf:"varint,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConnectIotPlatformRequest) Reset() {
	*x = ConnectIotPlatformRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectIotPlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectIotPlatformRequest) ProtoMessage() {}

func (x *ConnectIotPlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectIotPlatformRequest.ProtoReflect.Descriptor instead.
func (*ConnectIotPlatformRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectIotPlatformRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ConnectIotPlatformRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *ConnectIotPlatformRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *ConnectIotPlatformRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *ConnectIotPlatformRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *ConnectIotPlatformRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *ConnectIotPlatformRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type ConnectIotPlatformResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	TraceId       string                           `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                           `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                            `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                             `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *ConnectIotPlatformResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectIotPlatformResponse) Reset() {
	*x = ConnectIotPlatformResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectIotPlatformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectIotPlatformResponse) ProtoMessage() {}

func (x *ConnectIotPlatformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectIotPlatformResponse.ProtoReflect.Descriptor instead.
func (*ConnectIotPlatformResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectIotPlatformResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ConnectIotPlatformResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ConnectIotPlatformResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConnectIotPlatformResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnectIotPlatformResponse) GetData() *ConnectIotPlatformResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DisconnectIotPlatformRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	DeviceId          int64                  `protobuf:"varint,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DisconnectIotPlatformRequest) Reset() {
	*x = DisconnectIotPlatformRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectIotPlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectIotPlatformRequest) ProtoMessage() {}

func (x *DisconnectIotPlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectIotPlatformRequest.ProtoReflect.Descriptor instead.
func (*DisconnectIotPlatformRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{2}
}

func (x *DisconnectIotPlatformRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *DisconnectIotPlatformRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *DisconnectIotPlatformRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *DisconnectIotPlatformRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *DisconnectIotPlatformRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *DisconnectIotPlatformRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *DisconnectIotPlatformRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type DisconnectIotPlatformResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	TraceId       string                              `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                              `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                               `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                                `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *DisconnectIotPlatformResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectIotPlatformResponse) Reset() {
	*x = DisconnectIotPlatformResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectIotPlatformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectIotPlatformResponse) ProtoMessage() {}

func (x *DisconnectIotPlatformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectIotPlatformResponse.ProtoReflect.Descriptor instead.
func (*DisconnectIotPlatformResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{3}
}

func (x *DisconnectIotPlatformResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *DisconnectIotPlatformResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DisconnectIotPlatformResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DisconnectIotPlatformResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DisconnectIotPlatformResponse) GetData() *DisconnectIotPlatformResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDeviceByIdRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	Id                int64                  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryDeviceByIdRequest) Reset() {
	*x = QueryDeviceByIdRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDeviceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceByIdRequest) ProtoMessage() {}

func (x *QueryDeviceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceByIdRequest.ProtoReflect.Descriptor instead.
func (*QueryDeviceByIdRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{4}
}

func (x *QueryDeviceByIdRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueryDeviceByIdRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *QueryDeviceByIdRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *QueryDeviceByIdRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *QueryDeviceByIdRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *QueryDeviceByIdRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *QueryDeviceByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryDeviceByIdResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	TraceId       string                        `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                        `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                         `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                          `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *QueryDeviceByIdResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDeviceByIdResponse) Reset() {
	*x = QueryDeviceByIdResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDeviceByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceByIdResponse) ProtoMessage() {}

func (x *QueryDeviceByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceByIdResponse.ProtoReflect.Descriptor instead.
func (*QueryDeviceByIdResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{5}
}

func (x *QueryDeviceByIdResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueryDeviceByIdResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryDeviceByIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryDeviceByIdResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryDeviceByIdResponse) GetData() *QueryDeviceByIdResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProductId     int64                  `protobuf:"varint,4,opt,name=productId,proto3" json:"productId,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Platform      string                 `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceSn      string                 `protobuf:"bytes,7,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Secret        string                 `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	External      map[string]string      `protobuf:"bytes,9,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_driverdevice_device_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{6}
}

func (x *Device) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Device) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Device) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Device) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Device) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *Device) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Device) GetExternal() map[string]string {
	if x != nil {
		return x.External
	}
	return nil
}

type AddDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProductId     int64                  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DeviceSn      string                 `protobuf:"bytes,4,opt,name=deviceSn,proto3" json:"deviceSn,omitempty"`
	Addr          int32                  `protobuf:"varint,5,opt,name=addr,proto3" json:"addr,omitempty"` //从机地址,子设备用
	External      map[string]string      `protobuf:"bytes,6,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDevice) Reset() {
	*x = AddDevice{}
	mi := &file_driverdevice_device_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevice) ProtoMessage() {}

func (x *AddDevice) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevice.ProtoReflect.Descriptor instead.
func (*AddDevice) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{7}
}

func (x *AddDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDevice) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddDevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddDevice) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *AddDevice) GetAddr() int32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *AddDevice) GetExternal() map[string]string {
	if x != nil {
		return x.External
	}
	return nil
}

type CreateDeviceRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	Device            *AddDevice             `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDeviceRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *CreateDeviceRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *CreateDeviceRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *CreateDeviceRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *CreateDeviceRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *CreateDeviceRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *CreateDeviceRequest) GetDevice() *AddDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateDeviceRequestResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	TraceId       string                            `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                            `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                             `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                              `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *CreateDeviceRequestResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequestResponse) Reset() {
	*x = CreateDeviceRequestResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequestResponse) ProtoMessage() {}

func (x *CreateDeviceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequestResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceRequestResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *CreateDeviceRequestResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateDeviceRequestResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateDeviceRequestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateDeviceRequestResponse) GetData() *CreateDeviceRequestResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceAndConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *AddDevice             `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceAndConnectRequest) Reset() {
	*x = CreateDeviceAndConnectRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceAndConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceAndConnectRequest) ProtoMessage() {}

func (x *CreateDeviceAndConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceAndConnectRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceAndConnectRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDeviceAndConnectRequest) GetDevice() *AddDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateDeviceAndConnectRequestResponse struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	TraceId       string                                      `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                                      `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                                       `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                                        `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *CreateDeviceAndConnectRequestResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceAndConnectRequestResponse) Reset() {
	*x = CreateDeviceAndConnectRequestResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceAndConnectRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceAndConnectRequestResponse) ProtoMessage() {}

func (x *CreateDeviceAndConnectRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceAndConnectRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceAndConnectRequestResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDeviceAndConnectRequestResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *CreateDeviceAndConnectRequestResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateDeviceAndConnectRequestResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateDeviceAndConnectRequestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateDeviceAndConnectRequestResponse) GetData() *CreateDeviceAndConnectRequestResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDeviceRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	DeviceId          int64                  `protobuf:"varint,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteDeviceRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *DeleteDeviceRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *DeleteDeviceRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *DeleteDeviceRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *DeleteDeviceRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *DeleteDeviceRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *DeleteDeviceRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type DeleteDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceId       string                 `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                  `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteDeviceResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *DeleteDeviceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteDeviceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteDeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetDeviceConnectStatusRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TraceId           string                 `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	CloudInstanceId   int64                  `protobuf:"varint,2,opt,name=cloudInstanceId,proto3" json:"cloudInstanceId,omitempty"`
	BaseAddress       string                 `protobuf:"bytes,3,opt,name=baseAddress,proto3" json:"baseAddress,omitempty"`
	CloudInstanceName string                 `protobuf:"bytes,4,opt,name=cloudInstanceName,proto3" json:"cloudInstanceName,omitempty"`
	IotPlatform       string                 `protobuf:"bytes,5,opt,name=iotPlatform,proto3" json:"iotPlatform,omitempty"`
	DriverInstanceId  int64                  `protobuf:"varint,6,opt,name=driverInstanceId,proto3" json:"driverInstanceId,omitempty"`
	DeviceId          int64                  `protobuf:"varint,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetDeviceConnectStatusRequest) Reset() {
	*x = GetDeviceConnectStatusRequest{}
	mi := &file_driverdevice_device_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceConnectStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConnectStatusRequest) ProtoMessage() {}

func (x *GetDeviceConnectStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConnectStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceConnectStatusRequest) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{14}
}

func (x *GetDeviceConnectStatusRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *GetDeviceConnectStatusRequest) GetCloudInstanceId() int64 {
	if x != nil {
		return x.CloudInstanceId
	}
	return 0
}

func (x *GetDeviceConnectStatusRequest) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *GetDeviceConnectStatusRequest) GetCloudInstanceName() string {
	if x != nil {
		return x.CloudInstanceName
	}
	return ""
}

func (x *GetDeviceConnectStatusRequest) GetIotPlatform() string {
	if x != nil {
		return x.IotPlatform
	}
	return ""
}

func (x *GetDeviceConnectStatusRequest) GetDriverInstanceId() int64 {
	if x != nil {
		return x.DriverInstanceId
	}
	return 0
}

func (x *GetDeviceConnectStatusRequest) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type GetDeviceConnectStatusResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	TraceId       string                               `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	Msg           string                               `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Code          int32                                `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	Success       bool                                 `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	Data          *GetDeviceConnectStatusResponse_Data `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceConnectStatusResponse) Reset() {
	*x = GetDeviceConnectStatusResponse{}
	mi := &file_driverdevice_device_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceConnectStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConnectStatusResponse) ProtoMessage() {}

func (x *GetDeviceConnectStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConnectStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceConnectStatusResponse) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeviceConnectStatusResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *GetDeviceConnectStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDeviceConnectStatusResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeviceConnectStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetDeviceConnectStatusResponse) GetData() *GetDeviceConnectStatusResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConnectIotPlatformResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ConnectStatus          `protobuf:"varint,1,opt,name=Status,proto3,enum=driverdevice.ConnectStatus" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectIotPlatformResponse_Data) Reset() {
	*x = ConnectIotPlatformResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectIotPlatformResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectIotPlatformResponse_Data) ProtoMessage() {}

func (x *ConnectIotPlatformResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectIotPlatformResponse_Data.ProtoReflect.Descriptor instead.
func (*ConnectIotPlatformResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ConnectIotPlatformResponse_Data) GetStatus() ConnectStatus {
	if x != nil {
		return x.Status
	}
	return ConnectStatus_ONLINE
}

type DisconnectIotPlatformResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ConnectStatus          `protobuf:"varint,1,opt,name=Status,proto3,enum=driverdevice.ConnectStatus" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectIotPlatformResponse_Data) Reset() {
	*x = DisconnectIotPlatformResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectIotPlatformResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectIotPlatformResponse_Data) ProtoMessage() {}

func (x *DisconnectIotPlatformResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectIotPlatformResponse_Data.ProtoReflect.Descriptor instead.
func (*DisconnectIotPlatformResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DisconnectIotPlatformResponse_Data) GetStatus() ConnectStatus {
	if x != nil {
		return x.Status
	}
	return ConnectStatus_ONLINE
}

type QueryDeviceByIdResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDeviceByIdResponse_Data) Reset() {
	*x = QueryDeviceByIdResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDeviceByIdResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceByIdResponse_Data) ProtoMessage() {}

func (x *QueryDeviceByIdResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceByIdResponse_Data.ProtoReflect.Descriptor instead.
func (*QueryDeviceByIdResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{5, 0}
}

func (x *QueryDeviceByIdResponse_Data) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateDeviceRequestResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequestResponse_Data) Reset() {
	*x = CreateDeviceRequestResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequestResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequestResponse_Data) ProtoMessage() {}

func (x *CreateDeviceRequestResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequestResponse_Data.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequestResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CreateDeviceRequestResponse_Data) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateDeviceAndConnectRequestResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceAndConnectRequestResponse_Data) Reset() {
	*x = CreateDeviceAndConnectRequestResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceAndConnectRequestResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceAndConnectRequestResponse_Data) ProtoMessage() {}

func (x *CreateDeviceAndConnectRequestResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceAndConnectRequestResponse_Data.ProtoReflect.Descriptor instead.
func (*CreateDeviceAndConnectRequestResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CreateDeviceAndConnectRequestResponse_Data) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetDeviceConnectStatusResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ConnectStatus          `protobuf:"varint,1,opt,name=Status,proto3,enum=driverdevice.ConnectStatus" json:"Status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceConnectStatusResponse_Data) Reset() {
	*x = GetDeviceConnectStatusResponse_Data{}
	mi := &file_driverdevice_device_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceConnectStatusResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConnectStatusResponse_Data) ProtoMessage() {}

func (x *GetDeviceConnectStatusResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverdevice_device_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConnectStatusResponse_Data.ProtoReflect.Descriptor instead.
func (*GetDeviceConnectStatusResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverdevice_device_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetDeviceConnectStatusResponse_Data) GetStatus() ConnectStatus {
	if x != nil {
		return x.Status
	}
	return ConnectStatus_ONLINE
}

var File_driverdevice_device_proto protoreflect.FileDescriptor

var file_driverdevice_device_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c,
	0x02, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xfc, 0x01,
	0x0a, 0x1d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x02, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x08,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x3b,
	0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6f,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x34,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x02, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x54, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x55, 0x6e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x10, 0x04, 0x32, 0xfa, 0x05, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49,
	0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x6f, 0x73, 0x74, 0x76, 0x69, 0x70, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x76, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_driverdevice_device_proto_rawDescOnce sync.Once
	file_driverdevice_device_proto_rawDescData []byte
)

func file_driverdevice_device_proto_rawDescGZIP() []byte {
	file_driverdevice_device_proto_rawDescOnce.Do(func() {
		file_driverdevice_device_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_driverdevice_device_proto_rawDesc), len(file_driverdevice_device_proto_rawDesc)))
	})
	return file_driverdevice_device_proto_rawDescData
}

var file_driverdevice_device_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_driverdevice_device_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_driverdevice_device_proto_goTypes = []any{
	(DeviceStatus)(0),                                  // 0: driverdevice.DeviceStatus
	(ConnectStatus)(0),                                 // 1: driverdevice.ConnectStatus
	(*ConnectIotPlatformRequest)(nil),                  // 2: driverdevice.ConnectIotPlatformRequest
	(*ConnectIotPlatformResponse)(nil),                 // 3: driverdevice.ConnectIotPlatformResponse
	(*DisconnectIotPlatformRequest)(nil),               // 4: driverdevice.DisconnectIotPlatformRequest
	(*DisconnectIotPlatformResponse)(nil),              // 5: driverdevice.DisconnectIotPlatformResponse
	(*QueryDeviceByIdRequest)(nil),                     // 6: driverdevice.QueryDeviceByIdRequest
	(*QueryDeviceByIdResponse)(nil),                    // 7: driverdevice.QueryDeviceByIdResponse
	(*Device)(nil),                                     // 8: driverdevice.Device
	(*AddDevice)(nil),                                  // 9: driverdevice.AddDevice
	(*CreateDeviceRequest)(nil),                        // 10: driverdevice.CreateDeviceRequest
	(*CreateDeviceRequestResponse)(nil),                // 11: driverdevice.CreateDeviceRequestResponse
	(*CreateDeviceAndConnectRequest)(nil),              // 12: driverdevice.CreateDeviceAndConnectRequest
	(*CreateDeviceAndConnectRequestResponse)(nil),      // 13: driverdevice.CreateDeviceAndConnectRequestResponse
	(*DeleteDeviceRequest)(nil),                        // 14: driverdevice.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),                       // 15: driverdevice.DeleteDeviceResponse
	(*GetDeviceConnectStatusRequest)(nil),              // 16: driverdevice.GetDeviceConnectStatusRequest
	(*GetDeviceConnectStatusResponse)(nil),             // 17: driverdevice.GetDeviceConnectStatusResponse
	(*ConnectIotPlatformResponse_Data)(nil),            // 18: driverdevice.ConnectIotPlatformResponse.Data
	(*DisconnectIotPlatformResponse_Data)(nil),         // 19: driverdevice.DisconnectIotPlatformResponse.Data
	(*QueryDeviceByIdResponse_Data)(nil),               // 20: driverdevice.QueryDeviceByIdResponse.Data
	nil,                                                // 21: driverdevice.Device.ExternalEntry
	nil,                                                // 22: driverdevice.AddDevice.ExternalEntry
	(*CreateDeviceRequestResponse_Data)(nil),           // 23: driverdevice.CreateDeviceRequestResponse.Data
	(*CreateDeviceAndConnectRequestResponse_Data)(nil), // 24: driverdevice.CreateDeviceAndConnectRequestResponse.Data
	(*GetDeviceConnectStatusResponse_Data)(nil),        // 25: driverdevice.GetDeviceConnectStatusResponse.Data
}
var file_driverdevice_device_proto_depIdxs = []int32{
	18, // 0: driverdevice.ConnectIotPlatformResponse.data:type_name -> driverdevice.ConnectIotPlatformResponse.Data
	19, // 1: driverdevice.DisconnectIotPlatformResponse.data:type_name -> driverdevice.DisconnectIotPlatformResponse.Data
	20, // 2: driverdevice.QueryDeviceByIdResponse.data:type_name -> driverdevice.QueryDeviceByIdResponse.Data
	21, // 3: driverdevice.Device.External:type_name -> driverdevice.Device.ExternalEntry
	22, // 4: driverdevice.AddDevice.External:type_name -> driverdevice.AddDevice.ExternalEntry
	9,  // 5: driverdevice.CreateDeviceRequest.device:type_name -> driverdevice.AddDevice
	23, // 6: driverdevice.CreateDeviceRequestResponse.data:type_name -> driverdevice.CreateDeviceRequestResponse.Data
	9,  // 7: driverdevice.CreateDeviceAndConnectRequest.device:type_name -> driverdevice.AddDevice
	24, // 8: driverdevice.CreateDeviceAndConnectRequestResponse.data:type_name -> driverdevice.CreateDeviceAndConnectRequestResponse.Data
	25, // 9: driverdevice.GetDeviceConnectStatusResponse.data:type_name -> driverdevice.GetDeviceConnectStatusResponse.Data
	1,  // 10: driverdevice.ConnectIotPlatformResponse.Data.Status:type_name -> driverdevice.ConnectStatus
	1,  // 11: driverdevice.DisconnectIotPlatformResponse.Data.Status:type_name -> driverdevice.ConnectStatus
	8,  // 12: driverdevice.QueryDeviceByIdResponse.Data.device:type_name -> driverdevice.Device
	8,  // 13: driverdevice.CreateDeviceRequestResponse.Data.device:type_name -> driverdevice.Device
	8,  // 14: driverdevice.CreateDeviceAndConnectRequestResponse.Data.device:type_name -> driverdevice.Device
	1,  // 15: driverdevice.GetDeviceConnectStatusResponse.Data.Status:type_name -> driverdevice.ConnectStatus
	2,  // 16: driverdevice.RpcDevice.ConnectIotPlatform:input_type -> driverdevice.ConnectIotPlatformRequest
	4,  // 17: driverdevice.RpcDevice.DisconnectIotPlatform:input_type -> driverdevice.DisconnectIotPlatformRequest
	16, // 18: driverdevice.RpcDevice.GetDeviceConnectStatus:input_type -> driverdevice.GetDeviceConnectStatusRequest
	6,  // 19: driverdevice.RpcDevice.QueryDeviceById:input_type -> driverdevice.QueryDeviceByIdRequest
	10, // 20: driverdevice.RpcDevice.CreateDevice:input_type -> driverdevice.CreateDeviceRequest
	12, // 21: driverdevice.RpcDevice.CreateDeviceAndConnect:input_type -> driverdevice.CreateDeviceAndConnectRequest
	14, // 22: driverdevice.RpcDevice.DeleteDevice:input_type -> driverdevice.DeleteDeviceRequest
	3,  // 23: driverdevice.RpcDevice.ConnectIotPlatform:output_type -> driverdevice.ConnectIotPlatformResponse
	5,  // 24: driverdevice.RpcDevice.DisconnectIotPlatform:output_type -> driverdevice.DisconnectIotPlatformResponse
	17, // 25: driverdevice.RpcDevice.GetDeviceConnectStatus:output_type -> driverdevice.GetDeviceConnectStatusResponse
	7,  // 26: driverdevice.RpcDevice.QueryDeviceById:output_type -> driverdevice.QueryDeviceByIdResponse
	11, // 27: driverdevice.RpcDevice.CreateDevice:output_type -> driverdevice.CreateDeviceRequestResponse
	13, // 28: driverdevice.RpcDevice.CreateDeviceAndConnect:output_type -> driverdevice.CreateDeviceAndConnectRequestResponse
	15, // 29: driverdevice.RpcDevice.DeleteDevice:output_type -> driverdevice.DeleteDeviceResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_driverdevice_device_proto_init() }
func file_driverdevice_device_proto_init() {
	if File_driverdevice_device_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_driverdevice_device_proto_rawDesc), len(file_driverdevice_device_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driverdevice_device_proto_goTypes,
		DependencyIndexes: file_driverdevice_device_proto_depIdxs,
		EnumInfos:         file_driverdevice_device_proto_enumTypes,
		MessageInfos:      file_driverdevice_device_proto_msgTypes,
	}.Build()
	File_driverdevice_device_proto = out.File
	file_driverdevice_device_proto_goTypes = nil
	file_driverdevice_device_proto_depIdxs = nil
}
